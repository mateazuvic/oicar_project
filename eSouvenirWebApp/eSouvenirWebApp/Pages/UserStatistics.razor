@page "/userStatistics"
@inject HttpClient Http



<h1>User Statistics</h1>

<RadzenGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            PageSize="5" AllowSorting="true" Data="@Users" ColumnWidth="150px">
    <Columns>

        <RadzenGridColumn TItem="Models.User" Property="Username" Title="Username"></RadzenGridColumn>
        <RadzenGridColumn TItem="Models.User" Property="IsAdmin" Title="IsAdmin"></RadzenGridColumn>
        <RadzenGridColumn TItem="Models.User" Title="User statistics" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="user">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="assessment" Size="ButtonSize.Medium" Class="m-1" Click="@(args => GetStatistics(user))" @onclick:stopPropagation="true"></RadzenButton>
            </Template>
        </RadzenGridColumn>

    </Columns>

</RadzenGrid>

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart>
                <RadzenColumnSeries Data="@UserToShow" CategoryProperty="Username" Title="Visited cities" LineType="LineType.Dashed" ValueProperty="NbrOfVisitedCities" />
                <RadzenColumnSeries  Data="@UserToShow" CategoryProperty="Username" Title="Number of QR Codes" LineType="LineType.Dashed" ValueProperty="NbrOfQRCodes" />
                <RadzenValueAxis Min="0" Max="6" Step="2">
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenColumnOptions Radius="3" />
                <RadzenCategoryAxis Padding="400">
                </RadzenCategoryAxis>
            </RadzenChart>
        </div>
    </div>
</div>






@code {


    private List<Models.User> Users = new List<Models.User>();
    private List<Models.QRCode> QRCodes = new List<Models.QRCode>();
    private List<Models.City> Cities = new List<Models.City>();
    private List<Models.User> UserToShow = new List<Models.User>();


    public int BrojGradova { get; set; }
    public int BrojKodova { get; set; }
    public int IdUserClicked { get; set; }
    

    protected override async Task OnInitializedAsync()
    {

        Users = await Http.GetFromJsonAsync<List<Models.User>>("api/Users/get");
        QRCodes = await Http.GetFromJsonAsync<List<Models.QRCode>>("api/QRCode/get");
        Cities = await Http.GetFromJsonAsync<List<Models.City>>("api/Cities/get");

        foreach (var item in Users)
        {
            item.PassString = ConvertByteToString(item.Pass);
        }

        Count();
        CountQRCodes();

    }

    private string ConvertByteToString(byte[] bytes)
    {
        return BitConverter.ToString(bytes).Replace("-", String.Empty);
    }

    private void GetStatistics(Models.User user)
    {
        UserToShow.Clear();
        UserToShow.Add(user);
        IdUserClicked = user.IDUser;
        BrojGradova = user.NbrOfVisitedCities;
        BrojKodova = user.NbrOfQRCodes;

    }

    private void Count()
    {
        foreach (var user in Users)
        {
            foreach (var city in Cities)
            {
                foreach (var qr in QRCodes)
                {
                    if (qr.UserID == user.IDUser && qr.CityID == city.IDCity)
                    {
                        user.NbrOfVisitedCities++;
                        break;
                    }
                }

            }
        }

    }

    private void CountQRCodes()
    {
        foreach (var user in Users)
        {

            foreach (var qr in QRCodes)
            {
                if (qr.UserID == user.IDUser)
                {
                    user.NbrOfQRCodes++;

                }
            }


        }
    }


}
